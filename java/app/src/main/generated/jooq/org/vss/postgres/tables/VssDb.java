/*
 * This file is generated by jOOQ.
 */
package org.vss.postgres.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vss.postgres.Keys;
import org.vss.postgres.Public;
import org.vss.postgres.tables.records.VssDbRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VssDb extends TableImpl<VssDbRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vss_db</code>
     */
    public static final VssDb VSS_DB = new VssDb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VssDbRecord> getRecordType() {
        return VssDbRecord.class;
    }

    /**
     * The column <code>public.vss_db.user_token</code>.
     */
    public final TableField<VssDbRecord, String> USER_TOKEN = createField(DSL.name("user_token"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>public.vss_db.store_id</code>.
     */
    public final TableField<VssDbRecord, String> STORE_ID = createField(DSL.name("store_id"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>public.vss_db.key</code>.
     */
    public final TableField<VssDbRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(600).nullable(false), this, "");

    /**
     * The column <code>public.vss_db.value</code>.
     */
    public final TableField<VssDbRecord, byte[]> VALUE = createField(DSL.name("value"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.vss_db.version</code>.
     */
    public final TableField<VssDbRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.vss_db.created_at</code>.
     */
    public final TableField<VssDbRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.vss_db.last_updated_at</code>.
     */
    public final TableField<VssDbRecord, OffsetDateTime> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private VssDb(Name alias, Table<VssDbRecord> aliased) {
        this(alias, aliased, null);
    }

    private VssDb(Name alias, Table<VssDbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vss_db</code> table reference
     */
    public VssDb(String alias) {
        this(DSL.name(alias), VSS_DB);
    }

    /**
     * Create an aliased <code>public.vss_db</code> table reference
     */
    public VssDb(Name alias) {
        this(alias, VSS_DB);
    }

    /**
     * Create a <code>public.vss_db</code> table reference
     */
    public VssDb() {
        this(DSL.name("vss_db"), null);
    }

    public <O extends Record> VssDb(Table<O> child, ForeignKey<O, VssDbRecord> key) {
        super(child, key, VSS_DB);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<VssDbRecord> getPrimaryKey() {
        return Keys.VSS_DB_PKEY;
    }

    @Override
    public List<Check<VssDbRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("vss_db_store_id_check"), "(((store_id)::text <> ''::text))", true),
            Internal.createCheck(this, DSL.name("vss_db_user_token_check"), "(((user_token)::text <> ''::text))", true)
        );
    }

    @Override
    public VssDb as(String alias) {
        return new VssDb(DSL.name(alias), this);
    }

    @Override
    public VssDb as(Name alias) {
        return new VssDb(alias, this);
    }

    @Override
    public VssDb as(Table<?> alias) {
        return new VssDb(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VssDb rename(String name) {
        return new VssDb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VssDb rename(Name name) {
        return new VssDb(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VssDb rename(Table<?> name) {
        return new VssDb(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, byte[], Long, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super byte[], ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super byte[], ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
